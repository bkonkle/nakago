[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true

[config]
main_project_member = "./"
default_to_workspace = false

[tasks.setup]
script = '''
    echo # installing git hooks
    pre-commit --version || pip install pre-commit
    pre-commit install || echo "failed to install git hooks!" 1>&2

    echo # requirements for `cargo make test`
    cargo install cargo-nextest

    echo # requirements by `cargo make pre-commit`
    cargo install cargo-spellcheck

    echo # requirements by `cargo make coverage`
    rustup component add llvm-tools-preview
    cargo install cargo-llvm-cov

    echo # requirements by `cargo make audit`
    cargo install cargo-audit

    echo # requirements for `cargo make db-` tasks
    cargo install sqlx-cli --no-default-features --features rustls,postgres
'''

[tasks.check]
command = "cargo"
args = [
    "clippy",
    "--tests",
    "--examples",
    "--all-targets",
    "--all-features",
    "--workspace",
]

[tasks.format]
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.test]
env = { "RUST_LOG" = "info" }
command = "cargo"
args = ["nextest", "run", "--workspace", "${@}"]

[tasks.test-ci]
env = { "RUST_LOG" = "info", "RUN_MODE" = "ci" }
command = "cargo"
args = ["nextest", "run", "--workspace"]

[tasks.docs]
command = "cargo"
args = [
    "doc",
    "--no-deps",
    "--all-features",
    "--document-private-items",
    "--workspace",
    "--examples",
]

[tasks.cov]
command = "cargo"
args = ["llvm-cov", "nextest", "${@}"]

[tasks.cov-ci]
command = "cargo"
args = ["llvm-cov", "nextest", "--lcov", "--output-path", "lcov.info"]

[tasks.integration-ci]
env = { "RUN_MODE" = "ci", "RUST_LOG" = "info,sqlx::query=warn" }
command = "cargo"
args = ["nextest", "run", "--features=integration", "--workspace"]

[tasks.integration]
env = { "RUN_MODE" = "test", "RUST_LOG" = "info,sqlx::query=warn", "RUST_BACKTRACE" = 1 }
command = "cargo"
args = ["nextest", "run", "--features=integration", "--workspace", "${@}"]

# Run an individual integration test. Requires an argument like --package or --bin.
[tasks.int]
env = { "RUN_MODE" = "test", "RUST_LOG" = "info,sqlx::query=warn", "RUST_BACKTRACE" = 1 }
command = "cargo"
args = ["nextest", "run", "--features=integration", "${@}"]

[tasks.audit]
command = "cargo"
# Ignore RUSTSEC-2023-0071 and RUSTSEC-2024-0363 until SeaORM can be updated with an rsa & sqlx fix
args = [
    "audit",
    "--ignore",
    "RUSTSEC-2023-0071",
    "--ignore",
    "RUSTSEC-2024-0363",
]

[tasks.timings]
script = '''
    cargo clean
    cargo build --release --quiet --timings
    xdg-open target/cargo-timings/cargo-timing.html
'''

[tasks.pre-commit]
script = '''
    cargo make test
    cargo make docs
    cargo spellcheck fix
    cargo spellcheck reflow
'''

# Run example projects

[tasks.run-simple]
env = { "RUST_LOG" = "info,sqlx::query=warn" }
command = "cargo"
args = ["run", "-p", "nakago-examples-simple"]
watch = true

[tasks.run-simple-warp]
env = { "RUST_LOG" = "info,sqlx::query=warn" }
command = "cargo"
args = ["run", "-p", "nakago-examples-simple-warp"]
watch = true

[tasks.run-async-graphql]
env = { "RUST_LOG" = "info,sqlx::query=warn" }
command = "cargo"
args = ["run", "-p", "nakago-examples-async-graphql"]
watch = true

# Database tasks for example projects

[tasks.db-create]
dependencies = ["db-create-async-graphql"]

[tasks.db-migrate]
dependencies = ["db-migrate-async-graphql"]

[tasks.db-reset]
dependencies = ["db-reset-async-graphql"]

[tasks.db-create-async-graphql]
env = { "DATABASE_URL" = "${DATABASE_URL_ASYNC_GRAPHQL}" }
cwd = "./examples/async-graphql"
command = "sqlx"
args = ["db", "create"]

[tasks.db-migrate-async-graphql]
env = { "DATABASE_URL" = "${DATABASE_URL_ASYNC_GRAPHQL}" }
cwd = "./examples/async-graphql"
command = "sqlx"
args = ["migrate", "run"]

[tasks.db-reset-async-graphql]
env = { "DATABASE_URL" = "${DATABASE_URL_ASYNC_GRAPHQL}" }
cwd = "./examples/async-graphql"
command = "sqlx"
args = ["db", "reset"]

# Infrastructure commands for example projects

[tasks.docker]
cwd = "./"
command = "docker"
args = ["compose", "-f", "docker-compose.yml", "${@}"]

[tasks.docker-simple]
cwd = "./examples/simple"
command = "docker"
args = [
    "compose",
    "-f",
    "../../docker-compose.yml",
    "-f",
    "docker-compose.app.yml",
    "--env-file",
    "../../.env",
    "${@}",
]

[tasks.docker-simple-warp]
cwd = "./examples/simple-warp"
command = "docker"
args = [
    "compose",
    "-f",
    "../../docker-compose.yml",
    "-f",
    "docker-compose.app.yml",
    "--env-file",
    "../../.env",
    "${@}",
]

[tasks.docker-async-graphql]
cwd = "./examples/async-graphql"
command = "docker"
args = [
    "compose",
    "-f",
    "../../docker-compose.yml",
    "-f",
    "docker-compose.app.yml",
    "--env-file",
    "../../.env",
    "${@}",
]
