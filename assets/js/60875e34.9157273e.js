"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[554],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(h,r(r({ref:t},p),{},{components:n})):a.createElement(h,r({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var u=2;u<o;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},r="Tutorial",l={unversionedId:"tutorial",id:"tutorial",title:"Tutorial",description:"This tutorial will walk you through the basics of using Nakago to build a simple HTTP service. It will use Axum to provide HTTP routes and will decode the user's JWT token and verify their identity via a separate OAuth2 provider, such as Auth0 or Okta or your own self-hosted service.",source:"@site/docs/tutorial.md",sourceDirName:".",slug:"/tutorial",permalink:"/docs/tutorial",draft:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/tutorial.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Welcome to Nakago",permalink:"/docs/intro"},next:{title:"Features",permalink:"/docs/category/features"}},s={},u=[{value:"Cargo-Generate Template",id:"cargo-generate-template",level:2},{value:"Setup",id:"setup",level:2},{value:"Authentication",id:"authentication",level:2},{value:"AuthConfig",id:"authconfig",level:3},{value:"Axum State",id:"axum-state",level:3},{value:"Axum Route",id:"axum-route",level:3},{value:"Running the App",id:"running-the-app",level:3},{value:"Integration Testing",id:"integration-testing",level:2},{value:"Test Utils",id:"test-utils",level:3},{value:"HTTP Calls",id:"http-calls",level:3},{value:"Running the Tests",id:"running-the-tests",level:3}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tutorial"},"Tutorial"),(0,i.kt)("p",null,"This tutorial will walk you through the basics of using Nakago to build a simple HTTP service. It will use Axum to provide HTTP routes and will decode the user's JWT token and verify their identity via a separate OAuth2 provider, such as Auth0 or Okta or your own self-hosted service."),(0,i.kt)("h2",{id:"cargo-generate-template"},"Cargo-Generate Template"),(0,i.kt)("p",null,"First install ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo-generate"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cargo install cargo-generate\n")),(0,i.kt)("p",null,"Then generate a new project with this template:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cargo generate bkonkle/nakago-simple-template\n")),(0,i.kt)("p",null,"You'll see a folder structure like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},"simple/\n\u251c\u2500 .cargo/ -- Clippy config\n\u251c\u2500 .github/ -- Github Actions\n\u251c\u2500 config/ -- Config files for different environments\n\u251c\u2500 src/\n\u2502  \u251c\u2500 http/ -- Axum HTTP routes\n\u2502  \u2502  \u251c\u2500 handlers.rs\n\u2502  \u2502  \u251c\u2500 mod.rs\n\u2502  \u2502  \u251c\u2500 routes.rs\n\u2502  \u2502  \u2514\u2500 state.rs\n\u2502  \u251c\u2500 config.rs -- Your app's custom Config struct\n\u2502  \u251c\u2500 init.rs -- App initialization\n\u2502  \u251c\u2500 lib.rs\n\u2502  \u2514\u2500 main.rs -- Main entry point\n\u251c\u2500 Cargo.toml\n\u251c\u2500 Makefile.toml\n\u251c\u2500 README.md\n\u2514\u2500 // ...\n")),(0,i.kt)("p",null,"This includes a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"AppConfig")," struct with an embedded ",(0,i.kt)("inlineCode",{parentName:"p"},"HttpConfig")," provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-axum")," library. You can add your own configuration fields to this struct and they'll be populated by the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/figment/latest/figment/"},"figment")," crate."),(0,i.kt)("p",null,"It includes a barebones ",(0,i.kt)("inlineCode",{parentName:"p"},"init::app()")," function that will load your configuration and initialize your dependencies. You can add your own dependencies to this function and they'll be available when you build your Axum route state."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," uses the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/pico-args/0.5.0/pico_args/"},"pico-args")," to parse a simple command-line argument to specify an alternate config path, which is useful for many deployment scenarios that dynamically map a config file to a certain mount point within a container filesystem."),(0,i.kt)("p",null,"In the ",(0,i.kt)("inlineCode",{parentName:"p"},"http/")," folder, you'll find an empty AppState with a dependency injection Provider that you can fill in with your own dependencies. The router maps a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"GET /health")," route to a handler that returns a JSON response with a success message."),(0,i.kt)("p",null,"You now have a simple foundation to build on. Let's add some more functionality!"),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"Follow the Installation instructions in the ",(0,i.kt)("inlineCode",{parentName:"p"},"README.md")," to prepare your new local environment."),(0,i.kt)("h2",{id:"authentication"},"Authentication"),(0,i.kt)("p",null,"One of the first things you'll probably want to add to your application is authentication, which establishes the user's identity. This is separate and distinct from authorization, which determines what the user is allowed to do."),(0,i.kt)("p",null,"The only currently supported method of authentication is through JWT with JWKS keys. The ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-axum")," library provides a request extension for for Axum that will use ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/biscuit/0.6.0/biscuit/"},"biscuit")," to decode a JWT from the ",(0,i.kt)("inlineCode",{parentName:"p"},"Authorization")," header, validate it with a JWKS key from the ",(0,i.kt)("inlineCode",{parentName:"p"},"/.well-known/jwks.json")," path on the auth url, and then return the value of the ",(0,i.kt)("inlineCode",{parentName:"p"},"sub")," claim from the payload."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Configurable claims and other authentication methods will be added in the future.")),(0,i.kt)("h3",{id:"authconfig"},"AuthConfig"),(0,i.kt)("p",null,"In your ",(0,i.kt)("inlineCode",{parentName:"p"},"config.rs")," file, add a new property to the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppConfig")," struct:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use nakago_axum::auth::config::AuthConfig,\n\n/// Server Config\n#[derive(Default, Debug, Serialize, Deserialize, Clone, FromRef)]\npub struct AppConfig {\n    /// HTTP config\n    pub http: HttpConfig,\n\n    /// HTTP Auth Config\n    pub auth: AuthConfig,\n}\n")),(0,i.kt)("p",null,"This ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthConfig")," is automatically loaded as part of the default config loaders in the ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-axum")," crate, so this line in the ",(0,i.kt)("inlineCode",{parentName:"p"},"init.rs")," ensures that it is populated from environment variables or the currently chosen config file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Config\n\napp.on(\n    &EventType::Load,\n    AddConfigLoaders::new(default_http_config_loaders()),\n);\n")),(0,i.kt)("p",null,"Next, add the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"config/default.toml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[auth]\nurl = "https://simple-dev.oauth-service.com"\naudience = "localhost"\n\n[auth.client]\n')),(0,i.kt)("p",null,"Then, add a hint to your ",(0,i.kt)("inlineCode",{parentName:"p"},"config/local.toml.example")," so that new developers know they need to reach out to you for real values when they create their own ",(0,i.kt)("inlineCode",{parentName:"p"},"config/local.toml")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[auth.client]\nid = "client_id"\nsecret = "client_secret"\n')),(0,i.kt)("p",null,"Add the real details to your own ",(0,i.kt)("inlineCode",{parentName:"p"},"config/local.toml")," file, which should be excluded from git via the ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," file."),(0,i.kt)("h3",{id:"axum-state"},"Axum State"),(0,i.kt)("p",null,"Before you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," request extension with your Axum routes, you'll need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthState")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"AppState")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"http/state.rs")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use nakago_axum::auth::authenticate::AuthState;\n\n/// The top-level Application State\n#[derive(Clone, FromRef)]\npub struct AppState {\n    auth: AuthState,\n}\n")),(0,i.kt)("p",null,"In your ",(0,i.kt)("inlineCode",{parentName:"p"},"init.rs")," file, you'll want to add the use ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideJwks")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideAuthState")," to provide the AuthState that the custom ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideAppState")," provider unique to your app will use to populate that property."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Dependencies\n\napp.provide(&JWKS, ProvideJwks::default().with_config_tag(&CONFIG)).await?;\napp.provide(&AUTH_STATE, ProvideAuthState::default()).await?;\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},".with_config_tag(&CONFIG)")," provides the custom Tag for your ",(0,i.kt)("inlineCode",{parentName:"p"},"AppConfig"),", which will be unique to your app."),(0,i.kt)("p",null,"Then you can update the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideAppState")," provider in ",(0,i.kt)("inlineCode",{parentName:"p"},"http/state.rs")," to retrieve the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthState")," you provided earlier and use it when creating the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppState"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[Provider]\n#[async_trait]\nimpl Provider<AppState> for ProvideAppState {\n    async fn provide(self: Arc<Self>, i: Inject) -> InjectResult<Arc<AppState>> {\n        let auth = i.get(&AUTH_STATE).await?;\n\n        Ok(Arc::new(AppState {\n            auth: (*auth).clone(),\n        }))\n    }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"(*auth).clone()")," is because the `AuthState`` initially comes wrapped in an Arc, and this easily clones it out of the Arc."),(0,i.kt)("p",null,"You'll probably also want to add a note to the docstring for your ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideAppState")," provider so that you can see at a glance that this is a dependency your AppState requires."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"/// **Depends on:**\n///   - `Tag(AuthState)`\n")),(0,i.kt)("h3",{id:"axum-route"},"Axum Route"),(0,i.kt)("p",null,"You can now add a quick handler that allows a user to view their own username when logged in."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Get Username\n// ------------\n\n/// A Username Response\n#[derive(Debug, Clone, Serialize, Deserialize)]\npub struct UsernameResponse {\n    /// The Status code\n    code: usize,\n\n    /// The username, or "(anonymous)"\n    username: String,\n}\n\n/// Handle Get Username requests\npub async fn get_username_handler(sub: Subject) -> Json<UsernameResponse> {\n    let username = if let Subject(Some(username)) = sub {\n        username.clone()\n    } else {\n        "(anonymous)".to_string()\n    };\n\n    Json(UsernameResponse {\n        code: 200,\n        username,\n    })\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," extension uses the AuthState to decode the JWT and return the ",(0,i.kt)("inlineCode",{parentName:"p"},"sub")," claim from the payload. If the user is not logged in, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Subject")," will contain a ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("p",null,"Now add a route that uses the handler to ",(0,i.kt)("inlineCode",{parentName:"p"},"http/routes.rs"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'/// Initialize the User route\npub fn new_user_route(_: Inject) -> Route<AppState> {\n    Route::new("/", Router::new().route("/username", get(get_username_handler)))\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Inject")," container is there if you need it, but most things will be provided as part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"AppState")," so you can ignore it."),(0,i.kt)("p",null,"Finally, in your ",(0,i.kt)("inlineCode",{parentName:"p"},"init.rs")," add a new ",(0,i.kt)("inlineCode",{parentName:"p"},"InitRoute")," hook to your app:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Routes\n\napp.on(&EventType::Init, InitRoute::new(new_health_route));\napp.on(&EventType::Init, InitRoute::new(new_user_route)); // <-- the new route\n")),(0,i.kt)("h3",{id:"running-the-app"},"Running the App"),(0,i.kt)("p",null,"At this point, you can run your app and see the ",(0,i.kt)("inlineCode",{parentName:"p"},"(anonymous)")," response at the ",(0,i.kt)("inlineCode",{parentName:"p"},"GET /username")," endpoint:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"cargo make run\n")),(0,i.kt)("p",null,"You should see output that looks like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"2023-09-08T02:14:03.388670Z  INFO simple: Started on port: 8000\n")),(0,i.kt)("p",null,"When you call ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8000/username")," in your browser, you should see the following response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "code": 200,\n  "username": "(anonymous)"\n}\n')),(0,i.kt)("h2",{id:"integration-testing"},"Integration Testing"),(0,i.kt)("p",null,"Now that you have a simple route that requires authentication, you'll want to add some integration tests to ensure that it works as expected. You don't actually need to have an OAuth2 provider running to test this, because the ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-axum")," library provides a mock unverified ",(0,i.kt)("inlineCode",{parentName:"p"},"AuthState")," that you can use to simulate a logged-in user."),(0,i.kt)("h3",{id:"test-utils"},"Test Utils"),(0,i.kt)("p",null,"Nakago Axum's HTTP ",(0,i.kt)("inlineCode",{parentName:"p"},"TestUtils")," class is based on the idea of extending the base ",(0,i.kt)("inlineCode",{parentName:"p"},"TestUtils")," class you'll find in ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago_axum::test::utils::TestUtils")," with additional functionality, like adding a ",(0,i.kt)("inlineCode",{parentName:"p"},"graphql")," property if you're using ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-async-graphql")," or adding convenience methods around your app-specific data."),(0,i.kt)("p",null,"To start out with, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"simple/tests")," folder alongside your ",(0,i.kt)("inlineCode",{parentName:"p"},"simple/src"),". This will be used by Cargo as an ",(0,i.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch11-03-test-organization.html#integration-tests"},'"integration test"')," module, and will be excluded from your final binary. It allows you to import the module in your ",(0,i.kt)("inlineCode",{parentName:"p"},"src")," as if it were an external package, with access only to the public exports."),(0,i.kt)("p",null,"For the purposes of your own application, you'll want to create a ",(0,i.kt)("inlineCode",{parentName:"p"},"simple/tests/utils.rs")," file that wraps the ",(0,i.kt)("inlineCode",{parentName:"p"},"nakago-axum")," ",(0,i.kt)("inlineCode",{parentName:"p"},"TestUtils")," so that you can override any dependencies that you need or add convenience methods to build test data easily for your tests. Start out with a newtype like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use simple::{config::AppConfig, http::state::AppState};\n\npub struct TestUtils(nakago_axum::test::utils::TestUtils<AppConfig, AppState>);\n\n")),(0,i.kt)("p",null,"To make it easy to access the fields on the inner ",(0,i.kt)("inlineCode",{parentName:"p"},"TestUtils"),", you can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"Deref")," trait for your newtype. This isn't generally a good practice for newtypes in Production because it can result in some easy-to-miss implicit conversion behind the scenes, but in testing it's a nice convenience:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"use std::ops::Deref;\n\nimpl Deref for TestUtils {\n    type Target = nakago_axum::test::utils::TestUtils<AppConfig, AppState>;\n\n    fn deref(&self) -> &Self::Target {\n        &self.0\n    }\n}\n")),(0,i.kt)("p",null,"Now, you can implement an ",(0,i.kt)("inlineCode",{parentName:"p"},"init()")," method for your app-specific ",(0,i.kt)("inlineCode",{parentName:"p"},"TestUtils")," wrapper:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use nakago_axum::auth::{authenticate::ProvideUnverifiedAuthState, AUTH_STATE};\n\nuse simple::init;\n\nimpl TestUtils {\n    pub async fn init() -> Result<Self> {\n        let app = init::app().await?;\n\n        app.replace_with(&AUTH_STATE, ProvideUnverifiedAuthState::default())\n            .await?;\n\n        let utils = nakago_axum::test::utils::TestUtils::init(app, "/").await?;\n\n        Ok(Self(utils))\n    }\n}\n')),(0,i.kt)("p",null,"Now, create a ",(0,i.kt)("inlineCode",{parentName:"p"},"test_users_int.rs")," to represent your User integration tests, which will currently just test the ",(0,i.kt)("inlineCode",{parentName:"p"},"/username")," endpoint."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use test_utils::TestUtils;\n\n#[tokio::test]\n#[ignore]\nasync fn test_get_username_success() -> Result<()> {\n    let utils = TestUtils::init().await?;\n\n    todo!("unimplemented")\n}\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"todo!()")," macro allows you to leave this test unfinished for now, but it will throw an error if you try to execute the tests."),(0,i.kt)("h3",{id:"http-calls"},"HTTP Calls"),(0,i.kt)("p",null,"Next, we can add an HTTP call with a JWT token. First, create the dummy token, which will only work with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ProvideUnverifiedAuthState")," provider above for use in testing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use ulid::Ulid;\n\n#[tokio::test]\n#[ignore]\nasync fn test_get_username_success() -> Result<()> {\n    let utils = TestUtils::init().await?;\n\n    let username = Ulid::new().to_string();\n    let token = utils.create_jwt(&username).await?;\n\n    todo!("unimplemented")\n}\n')),(0,i.kt)("p",null,"Now we can make the HTTP call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let req = utils.http.call("/username", Value::Null, Some(&token))?;\nlet resp = utils.http_client.request(req).await?;\n')),(0,i.kt)("p",null,"Pull the response apart into a status and a body:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let status = resp.status();\nlet body = to_bytes(resp.into_body()).await?;\n")),(0,i.kt)("p",null,"Now you can make assertions based on the response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let json: Value = serde_json::from_slice(&body)?;\n\nassert_eq!(status, 200);\nassert_eq!(json["username"], username);\n')),(0,i.kt)("p",null,"Add an ",(0,i.kt)("inlineCode",{parentName:"p"},"Ok(())")," at the end to signal a successful test run, and your final test should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'use anyhow::Result;\n\n#[cfg(test)]\nmod test_utils;\n\nuse hyper::body::to_bytes;\nuse serde_json::Value;\nuse test_utils::TestUtils;\nuse ulid::Ulid;\n\n#[tokio::test]\n#[ignore]\nasync fn test_get_username_success() -> Result<()> {\n    let utils = TestUtils::init().await?;\n\n    let username = Ulid::new().to_string();\n    let token = utils.create_jwt(&username).await?;\n\n    let req = utils.http.call("/username", Value::Null, Some(&token))?;\n    let resp = utils.http_client.request(req).await?;\n\n    let status = resp.status();\n    let body = to_bytes(resp.into_body()).await?;\n\n    let json: Value = serde_json::from_slice(&body)?;\n\n    assert_eq!(status, 200);\n    assert_eq!(json["username"], username);\n\n    Ok(())\n}\n')),(0,i.kt)("h3",{id:"running-the-tests"},"Running the Tests"),(0,i.kt)("p",null,"COMING SOON..."))}c.isMDXComponent=!0}}]);