"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[495],{2130:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(5893),s=t(1151);const o={sidebar_position:1},r="Dependency Injection",a={id:"features/dependency-injection",title:"Dependency Injection",description:"Dependency injection is a way to decouple your structures from their dependencies. It allows you to replace the components that your system needs with alternative implementations for different situations.",source:"@site/docs/features/dependency-injection.md",sourceDirName:"features",slug:"/features/dependency-injection",permalink:"/docs/features/dependency-injection",draft:!1,unlisted:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/features/dependency-injection.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"documentationSidebar",previous:{title:"Features",permalink:"/docs/category/features"},next:{title:"Application Lifecycle",permalink:"/docs/features/application"}},d={},c=[{value:"Async",id:"async",level:2},{value:"Usage",id:"usage",level:2},{value:"Dependency Tags",id:"dependency-tags",level:2},{value:"Providing Dependencies",id:"providing-dependencies",level:2},{value:"The Provider Macro",id:"the-provider-macro",level:2},{value:"The Inject Container",id:"the-inject-container",level:2},{value:"Invoking Dependencies",id:"invoking-dependencies",level:2},{value:"Consuming Dependencies",id:"consuming-dependencies",level:2},{value:"Ejection",id:"ejection",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"}),"\n",(0,i.jsxs)(n.p,{children:["Dependency injection is a way to ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Loose_coupling",children:"decouple"})," your structures from their dependencies. It allows you to replace the components that your system needs with alternative implementations for different situations."]}),"\n",(0,i.jsx)(n.p,{children:"For example, a Controller may want to interact with a Repository to access information in persistent storage. In different situations you may want a Postgres Repository, a DynamoDB Repository, or an In-Memory Repository. Using dependency injection for loose coupling allows your Controller to depend on a common Repository trait that they all implement, without caring which underlying implementation actually fulfills the requirement."}),"\n",(0,i.jsxs)(n.p,{children:["This is accomplished using ",(0,i.jsx)(n.a,{href:"https://doc.rust-lang.org/std/any/index.html",children:"Any"})," from Rust's standard library. By using dynamic typing, you can easily swap between different implementations for different entry points or contexts, and easily add more as needed for any situation."]}),"\n",(0,i.jsxs)(n.p,{children:["One quirk of Any is that values need to have the ",(0,i.jsx)(n.code,{children:"'static"})," lifetime, meaning they are valid until program execution ends if they are not dropped. Keep this in mind if you're frequently injecting and removing items from the container during your program's lifecycle."]}),"\n",(0,i.jsx)(n.h2,{id:"async",children:"Async"}),"\n",(0,i.jsxs)(n.p,{children:["Nakago's ",(0,i.jsx)(n.code,{children:"Inject"})," framework is built on ",(0,i.jsx)(n.a,{href:"https://tokio.rs/",children:"Tokio"})," with ",(0,i.jsx)(n.a,{href:"https://docs.rs/futures/latest/futures/future/struct.Shared.html",children:"Shared Futures"}),", allowing multiple threads to request and await the same dependency and use an Arc to hold on to it across await points without worrying about lifetimes."]}),"\n",(0,i.jsxs)(n.p,{children:["It uses Providers that implement the async ",(0,i.jsx)(n.code,{children:"Provider"})," trait and use the provider's instance for configuration or context, and the Inject container to request other dependencies you require. Providers are lazily invoked - they are stored internally but not invoked until they are requested. They are then converted into a pending Shared Future that can be polled by multiple threads at the same time. This allows multiple resources to wait for the same Provider invocation without duplicaiton."]}),"\n",(0,i.jsxs)(n.p,{children:["Providers don't have to be injected in any order - they will wait inside the container until they have been requested, so you have some flexibility in your application's initialization process. They are guarded by ",(0,i.jsx)(n.code,{children:"RwLock"})," wrappers for thread-safe access, and the locks are released once the ",(0,i.jsx)(n.code,{children:"Arc<T>"})," is yielded."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"First, let's establish a hypothetical Entity and a trait that defines a method to retrieve it from persistent storage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use async_trait::async_trait;\n\nstruct Entity {\n    id: String,\n}\n\n#[async_trait]\ntrait Repository: Sync + Send {\n    async fn get(&self, id: &str) -> Option<Entity>;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Then a hypothetical Postgres implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use sqlx::{Pool, Postgres};\n\nstruct PostgresRepository {\n    pool: Pool<Postgres>\n}\n\n#[async_trait]\nimpl Repository for PostgresRepository {\n    async fn get(&self, id: &str) -> Option<Entity> {\n        // ...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"And an alternate DynamoDB implementation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use aws_sdk_dynamodb::Client;\n\nstruct DynamoRepository {\n    client: Client,\n}\n\n#[async_trait]\nimpl Repository for DynamoRepository {\n    async fn get(&self, id: &str) -> Option<Entity> {\n        // ...\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"dependency-tags",children:"Dependency Tags"}),"\n",(0,i.jsxs)(n.p,{children:["The injection framework can work directly with the ",(0,i.jsx)(n.code,{children:"TypeId"})," identifiers that are automatically generated by the ",(0,i.jsx)(n.a,{href:"https://doc.rust-lang.org/std/any/index.html",children:"any"})," package, but they often require you to pass in type parameters and repeat yourself more often, and they result in debug output that can be rather verbose:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"nakago::inject::container::test::entity::DynamoRepository was not found\n\nAvailable:\n - std::boxed::Box<dyn nakago::inject::container::test::entity::Repository>\n\n - nakago::inject::container::test::entity::PostgresRepository\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tags"})," carry the underlying type around with them, meaning it can be inferred by the compiler in most cases. They also allow you to inject multiple instances of the same type, with different keys. If you have multiple Database Configs, for example, you can inject them into the container with separate tags even though they contain the same type."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'pub const POSTGRES_REPO: Tag<PostgresRepository> = Tag::new("entity::PostgresRepository");\npub const DYNAMO_REPO: Tag<DynamoRepository> = Tag::new("entity::DynamoRepository");\npub const REPO: Tag<Box<dyn Repository>> = Tag::new("entity::Repository");\n'})}),"\n",(0,i.jsx)(n.p,{children:"Instead of requesting the type explicitly like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let result = i.get_type::<PostgresRepository>()?;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Tags are passed in and the type is inferred:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let result = i.get(&POSTGRES_REPO)?;\n"})}),"\n",(0,i.jsx)(n.p,{children:"Tags have a special String value that can be used instead of the full type name. This makes it easier to understand debug output, and this is what allows multiple versions of the same type to have different keys."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"Tag(DynamoEntityRepository) was not found\n\nAvailable:\n - Tag(EntityRepository)\n\n - Tag(PostgresEntityRepository)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"providing-dependencies",children:"Providing Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["To provide a dependency, create a Provider that implements the ",(0,i.jsx)(n.code,{children:"inject::Provider"})," trait:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use async_trait::async_trait;\nuse nakago::inject::{inject, Provider, Inject};\nuse sqlx::{Pool, Postgres};\n\n#[derive(Default)]\npub struct PostgresRepositoryProvider {}\n\n#[Provider]\n#[async_trait]\nimpl Provider<Box<dyn Repository>> for PostgresRepositoryProvider {\n    async fn provide(self: Arc<Self>, i: Inject) -> inject::Result<Arc<Box<dyn Repository>>> {\n        let pool = i.get_type::<Pool<Postgres>>().await?;\n\n        Ok(Arc::new(Box::new(PostgresRepository::new(pool.clone()))))\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"PostgresRepositoryProvider"})," struct is empty, and just exists so that we can implement the ",(0,i.jsx)(n.code,{children:"Provider<T>"})," trait. It uses ",(0,i.jsx)(n.code,{children:"#[derive(Default)]"})," because it doesn't need to initialize any config properties or context. It doesn't ",(0,i.jsx)(n.em,{children:"have"})," to be empty, though, and can carry information for the provider that is passed in on initialization and held until the Provider is invoked."]}),"\n",(0,i.jsxs)(n.p,{children:["The result is wrapped in an ",(0,i.jsx)(n.code,{children:"inject::Result"})," so that an ",(0,i.jsx)(n.code,{children:"Err"})," can be returned to handle things like a failed ",(0,i.jsx)(n.code,{children:"i.get()"})," call or a failed database connection initialization."]}),"\n",(0,i.jsxs)(n.p,{children:["In this particular case since ",(0,i.jsx)(n.code,{children:"Pool<Postgres>"})," is a known Sized type, it's safe to provide it without Boxing it to handle Unsized dynamic trait implementations. In many cases, however, you'll be working with ",(0,i.jsx)(n.code,{children:"dyn Trait"})," implementations so that you can swap between implementations easily. You'll want to make sure to box it up like ",(0,i.jsx)(n.code,{children:"Box<dyn Trait>"})," so that it can later be wrapped in the Shared Future and held across await points."]}),"\n",(0,i.jsx)(n.p,{children:"You don't need to worry about using a Tag with a Provider yet - that comes in the next step."}),"\n",(0,i.jsx)(n.h2,{id:"the-provider-macro",children:"The Provider Macro"}),"\n",(0,i.jsxs)(n.p,{children:["You may have noticed the ",(0,i.jsx)(n.code,{children:"#[Provider]"})," macro above. This macro provides a companion implementation for the ",(0,i.jsx)(n.code,{children:"impl Provider<Box<dyn Repository>>"})," above that provides ",(0,i.jsx)(n.code,{children:"impl Provider<Dependency>"})," instead. This is so that your Provider that carries a specific type ",(0,i.jsx)(n.code,{children:"T"})," can also provide the generic version of that Dependency that is ",(0,i.jsx)(n.code,{children:"dyn Any + Send + Sync"})," that the container needs to keep it in the same ",(0,i.jsx)(n.code,{children:"HashMap"})," as all the other dependencies."]}),"\n",(0,i.jsx)(n.p,{children:"If you want to provide it manually instead, you can:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[async_trait]\nimpl Provider<Dependency> for PostgresRepositoryProvider {\n    async fn provide(self: Arc<Self>, i: Inject) -> inject::Result<Arc<Dependency>> {\n        let provider = self as Arc<dyn Provider<Box<dyn Repository>>>;\n\n        Ok(provider.provide(i).await?)\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"the-inject-container",children:"The Inject Container"}),"\n",(0,i.jsx)(n.p,{children:"To make use of these Providers, create a dependency injection container instance:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let i = Inject::default();\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This is typically done at an entry point to your application, such as a ",(0,i.jsx)(n.code,{children:"main.go"})," file or within a unit or integration test setup routine."]}),"\n",(0,i.jsxs)(n.p,{children:["Now, use ",(0,i.jsx)(n.code,{children:"i.provide(...).await?"})," to inject the Provider and associate it with a Tag:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"i.provide(&REPO, PostgresRepositoryProvider::default()).await?;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["I'll pause to point out here that if you had tried to use the ",(0,i.jsx)(n.code,{children:"&POSTGRES_REPO"})," Tag here, the compiler would report an error because the ",(0,i.jsx)(n.code,{children:"PostgresRepositoryProvider"})," above provides ",(0,i.jsx)(n.code,{children:"Box<dyn Repository>"}),", not ",(0,i.jsx)(n.code,{children:"PostgresRepository"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"invoking-dependencies",children:"Invoking Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["To pull dependencies out of the container, use ",(0,i.jsx)(n.code,{children:"i.get(&TAG).await?"})," or ",(0,i.jsx)(n.code,{children:"i.get_type::<T>().await?"}),". If a dependency isn't available, the container will return an ",(0,i.jsx)(n.code,{children:"InjectError::NotFound"})," result. This is often performed within a ",(0,i.jsx)(n.code,{children:"provide"})," function from the ",(0,i.jsx)(n.code,{children:"Provider"})," trait, but it is also used often at entry points to bootstrap an application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let repo = i.get(&TAG).await?;\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"i.get_opt(&TAG).await?"})," to receive an Option rather than a Result."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let maybe_repo = i.get_opt(&TAG).await?;\n"})}),"\n",(0,i.jsx)(n.h2,{id:"consuming-dependencies",children:"Consuming Dependencies"}),"\n",(0,i.jsx)(n.p,{children:"In some cases, such as with Config Loaders, a dependency is intended to be used up and made unavailable afterwards. This is often done within Lifecycle Hooks."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let loaders = i.consume(&CONFIG_LOADERS).await?;\n\nlet loader = Loader::<C>::new(loaders);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In this example if any providers have been injected for the ",(0,i.jsx)(n.code,{children:"&CONFIG_LOADERS"})," tag they are requested, awaited, and then pulled out of the container and the tag is removed. If you try to ",(0,i.jsx)(n.code,{children:"i.get()"})," or ",(0,i.jsx)(n.code,{children:"i.consume()"})," the ",(0,i.jsx)(n.code,{children:"&CONFIG_LOADERS"})," tag again, you will receive the ",(0,i.jsx)(n.code,{children:"InjectError::NotFound"})," Error."]}),"\n",(0,i.jsx)(n.h2,{id:"ejection",children:"Ejection"}),"\n",(0,i.jsxs)(n.p,{children:["In certain contexts, such as testing, it's useful to drop the entire container except for a particular dependency - like a ",(0,i.jsx)(n.code,{children:"MockDatabaseConnection"})," used for validating expectations in unit testing."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let db = i.eject(&DATABASE_CONNECTION).await?;\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can then perform the mutable operations you need for validating assertions in testing:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Check the transaction log\nassert_eq!(\n    db.into_transaction_log(),\n    vec![Transaction::from_sql_and_values(\n        DatabaseBackend::Postgres,\n        r#"SELECT "episodes"."id", "episodes"."created_at", "episodes"."updated_at", "episodes"."title", "episodes"."summary", "episodes"."picture", "episodes"."show_id" FROM "episodes" WHERE "episodes"."id" = $1 LIMIT $2"#,\n        vec![episode.id.into(), 1u64.into()]\n    )]\n);\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var i=t(7294);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);