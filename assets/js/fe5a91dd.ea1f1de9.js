"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=c(n),d=a,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="Application Lifecycle",p={unversionedId:"features/application",id:"features/application",title:"Application Lifecycle",description:"To manage the lifecycle of an application, the top-level nakago::Application struct provides Init and Startup hooks and a system to trigger them. More hooks - like a Shutdown hook - are coming soon.",source:"@site/docs/features/application.md",sourceDirName:"features",slug:"/features/application",permalink:"/docs/features/application",draft:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/features/application.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Dependency Injection",permalink:"/docs/features/dependency-injection"},next:{title:"Axum HTTP Applications",permalink:"/docs/features/axum-http"}},l={},c=[{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2},{value:"Init",id:"init",level:3},{value:"Startup",id:"startup",level:3},{value:"Starting the Application",id:"starting-the-application",level:2}],s={toc:c},u="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"application-lifecycle"},"Application Lifecycle"),(0,a.kt)("p",null,"To manage the lifecycle of an application, the top-level ",(0,a.kt)("inlineCode",{parentName:"p"},"nakago::Application")," struct provides Init and Startup hooks and a system to trigger them. More hooks - like a Shutdown hook - are coming soon."),(0,a.kt)("p",null,"Applications are currently very simple:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Application<C: Config> {\n    events: Events,\n    i: inject::Inject,\n    _phantom: PhantomData<C>,\n}\n")),(0,a.kt)("p",null,"First, they carry a PhantomData reference to the custom ",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," type that your project uses. This Config borrows ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tokio-rs/axum"},"Axum"),"'s ",(0,a.kt)("a",{parentName:"p",href:"https://docs.rs/axum/latest/axum/extract/trait.FromRef.html"},"FromRef")," strategy to allow the framework to find pieces of the config it needs embedded in the custom structure that works best for your program."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Server Config\n#[derive(Debug, Serialize, Deserialize, Clone, FromRef)]\npub struct AppConfig {\n    /// HTTP config\n    pub http: HttpConfig,\n\n    /// HTTP Auth Config\n    pub auth: AuthConfig,\n\n    /// Database config\n    pub database: DatabaseConfig,\n}\n")),(0,a.kt)("h2",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,a.kt)("p",null,"Hooks are invoked when a ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/bkonkle/nakago/blob/main/nakago/src/lifecycle.rs"},"lifecycle event")," is triggered."),(0,a.kt)("h3",{id:"init"},"Init"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Init")," Hook is invoked before the Config Loaders are requested from the container and the loaders are used to initialize the Config. Anything that is needed to initialize your application's Config should go here. Each Hook is triggered in order when a lifecycle event is triggered."),(0,a.kt)("h3",{id:"startup"},"Startup"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Startup")," Hook is invoked after the Config is loaded, but before the Application is run."),(0,a.kt)("h2",{id:"starting-the-application"},"Starting the Application"),(0,a.kt)("p",null,"To start your application, pass in your top-level Config type and create an instance. Attach Hooks in the order that they should be executed:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let mut app = AxumApplication::<AppConfig>::default();\napp.on(&EventType::Init, InitDomains::default());\napp.on(&EventType::Init, InitApp::default());\napp.on(&EventType::Startup, InitAuthz::default());\n")),(0,a.kt)("p",null,"Then, use the underlying server library - Axum in this example - to start listening:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let server = app.run::<AppState>(args.config_path).await?;\nlet addr = server.local_addr();\n\ninfo!("Started on port: {port}", port = addr.port());\n\nserver.await?;\n')))}f.isMDXComponent=!0}}]);