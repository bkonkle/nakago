"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[30],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||u[h]||i;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4381:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:4},l="Examples",o={unversionedId:"examples",id:"examples",title:"Examples",description:"Simple",source:"@site/docs/examples.md",sourceDirName:".",slug:"/examples",permalink:"/docs/examples",draft:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/examples.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Async-GraphQL",permalink:"/docs/features/async-graphql"},next:{title:"Development",permalink:"/docs/development"}},s={},p=[{value:"Simple",id:"simple",level:2},{value:"Async-GraphQL",id:"async-graphql",level:2}],c={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"examples"},"Examples"),(0,r.kt)("h2",{id:"simple"},"Simple"),(0,r.kt)("p",null,"The Simple example is a very simple Axum HTTP service using JWT with JWKS for authentication, with a single route that returns a JSON response and an integration test that calls it."),(0,r.kt)("h2",{id:"async-graphql"},"Async-GraphQL"),(0,r.kt)("p",null,"The Async-GraphQL example demonstrates an example Application architecture using Async-GraphQL, SeaORM, and Axum."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/blob/main/examples/async-graphql/src/main.rs"},"Main")," is where the AxumApplication is initialized, using ",(0,r.kt)("inlineCode",{parentName:"li"},"pico_args")," for light argument parsing."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/blob/main/examples/async-graphql/src/http/routes.rs"},"Axum Routes")," are defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"routes.rs"),", along with an Inject Provider."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/blob/main/examples/async-graphql/src/http/handlers.rs"},"Axum Handlers")," are defined in ",(0,r.kt)("inlineCode",{parentName:"li"},"handlers.rs"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/blob/main/examples/async-graphql/src/graphql.rs"},"GraphQL Schema")," is initialized in ",(0,r.kt)("inlineCode",{parentName:"li"},"graphql.rs"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/blob/main/examples/async-graphql/src/init.rs"},"init::app()")," function intializes dependencies."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/bkonkle/nakago/tree/feature/nakago-sea-orm/examples/async-graphql/src/domains"},"Domains")," are defined in the ",(0,r.kt)("inlineCode",{parentName:"li"},"domains")," directory, and handle Database Models, GraphQL Resolvers, supporting Services, and more.")),(0,r.kt)("p",null,"This application will be slowly integrated into the framework itself, leaving a clean implementation of what is needed for your particular use cases rather than reinventing the wheel for each application."))}u.isMDXComponent=!0}}]);