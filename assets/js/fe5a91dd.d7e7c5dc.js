"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[591],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,h=u["".concat(l,".").concat(f)]||u[f]||d[f]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[u]="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},419:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},o="Application Lifecycle",p={unversionedId:"features/application",id:"features/application",title:"Application Lifecycle",description:"To manage the lifecycle of an application, the top-level nakago::Application struct provides a set of lifecycle hooks and an injection container that can be used to initialize and start the application.",source:"@site/docs/features/application.md",sourceDirName:"features",slug:"/features/application",permalink:"/docs/features/application",draft:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/features/application.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Dependency Injection",permalink:"/docs/features/dependency-injection"},next:{title:"Axum HTTP Applications",permalink:"/docs/features/axum-http"}},l={},s=[{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2},{value:"Load",id:"load",level:3},{value:"Init",id:"init",level:3},{value:"Startup",id:"startup",level:3},{value:"Shutdown",id:"shutdown",level:3},{value:"Starting the Application",id:"starting-the-application",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"application-lifecycle"},"Application Lifecycle"),(0,r.kt)("p",null,"To manage the lifecycle of an application, the top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"nakago::Application")," struct provides a set of lifecycle hooks and an injection container that can be used to initialize and start the application."),(0,r.kt)("p",null,"Applications carry a reference to the custom ",(0,r.kt)("inlineCode",{parentName:"p"},"Config")," type that your project uses, and an optional Tag to refer to it. This Config borrows ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tokio-rs/axum"},"Axum"),"'s ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/axum/latest/axum/extract/trait.FromRef.html"},"FromRef")," strategy to allow the framework to find pieces of the config it needs embedded in the custom structure that works best for your program."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// Server Config\n#[derive(Debug, Serialize, Deserialize, Clone, FromRef)]\npub struct Config {\n    /// HTTP config\n    pub http: nakago_axum::Config,\n\n    /// HTTP Auth Config\n    pub auth: auth::Config,\n\n    /// Database config\n    pub database: nakago_sea_orm::Config,\n}\n")),(0,r.kt)("h2",{id:"lifecycle-hooks"},"Lifecycle Hooks"),(0,r.kt)("p",null,"Hooks are invoked when a ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bkonkle/nakago/blob/main/nakago/src/lifecycle.rs"},"lifecycle event")," is triggered."),(0,r.kt)("h3",{id:"load"},"Load"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Load")," event is triggered before the Application loads dependencies and configuration. During this phase, Hooks should provide any dependencies or config loaders that are necessary to initialize and start the App."),(0,r.kt)("h3",{id:"init"},"Init"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Init")," event is triggered before the dependencies and configuration are initialized. During this phase, Hooks should perform any initialization steps and construct anything necessary to start the App."),(0,r.kt)("h3",{id:"startup"},"Startup"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Startup")," event is triggered after the Config is loaded, but before the Application is run. During this phase, the Application should start any background tasks or other long-running processes necessary to keep the App running."),(0,r.kt)("h3",{id:"shutdown"},"Shutdown"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Shutdown")," event is triggered before the Application shuts down. During this phase, Hooks should perform any cleanup necessary to cleanly stop the App."),(0,r.kt)("h2",{id:"starting-the-application"},"Starting the Application"),(0,r.kt)("p",null,"To start your application, pass in your top-level Config type and create an instance. Attach Hooks in the order that they should be executed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut app = AxumApplication::<Config>::default();\napp.on(&EventType::Load, users::schema::Load::default());\napp.on(&EventType::Load, authz::Load::default());\napp.on(&EventType::Init, routes::Init::new(new_health_route));\n")),(0,r.kt)("p",null,"Then, use the underlying server library - Axum in this example - to start listening:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let (server, addr) = app.run(args.config_path).await?;\n\ninfo!("Started on port: {port}", port = addr.port());\n\nserver.await?;\n')))}d.isMDXComponent=!0}}]);