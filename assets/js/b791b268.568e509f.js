"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[108],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:5},o="Async-GraphQL",l={unversionedId:"features/async-graphql",id:"features/async-graphql",title:"Async-GraphQL",description:"The GraphQL integration is built around a flexible Schema Builder approach that allows you to modify the in-progress schema to incrementally add things like DataLoaders and other context for your Resolvers. It uses the Init lifecycle hook as a trigger to build the final schema, making it available to the rest of your application through type ID or Tag.",source:"@site/docs/features/async-graphql.md",sourceDirName:"features",slug:"/features/async-graphql",permalink:"/docs/features/async-graphql",draft:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/features/async-graphql.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"documentationSidebar",previous:{title:"SeaORM",permalink:"/docs/features/sea-orm"},next:{title:"Examples",permalink:"/docs/examples"}},s={},p=[{value:"Dependencies vs. Context",id:"dependencies-vs-context",level:2},{value:"Resolvers",id:"resolvers",level:2},{value:"Loading",id:"loading",level:2},{value:"Initialization",id:"initialization",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"async-graphql"},"Async-GraphQL"),(0,r.kt)("p",null,"The GraphQL integration is built around a flexible Schema Builder approach that allows you to modify the in-progress schema to incrementally add things like DataLoaders and other context for your Resolvers. It uses the Init lifecycle hook as a trigger to build the final schema, making it available to the rest of your application through type ID or Tag."),(0,r.kt)("h2",{id:"dependencies-vs-context"},"Dependencies vs. Context"),(0,r.kt)("p",null,'Async-GraphQL provides its own lightweight synchronous dependency injection system within their request Context, called "data". In typical Async-GraphQL applications, this is used similarly to Axum State to provide dependencies that each Resolver needs to do its job.'),(0,r.kt)("p",null,"As we do with the Axum integration, for Nakago apps we separate the concept of Dependencies from the concept of Context, and instead use the Inject container to provide dependencies that remain the same across all requests. Data that varies from request to request should still be carried through the Context data, as usual."),(0,r.kt)("h2",{id:"resolvers"},"Resolvers"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// The Query segment for Users\n#[derive(Default)]\npub struct UsersQuery {}\n\n/// Queries for the User model\n#[Object]\nimpl UsersQuery {\n    /// Get the current User from the GraphQL context\n    async fn get_current_user(&self, ctx: &Context<'_>) -> Result<Option<User>> {\n        let user = ctx.data_unchecked::<Option<User>>();\n\n        Ok(user.clone())\n    }\n}\n")),(0,r.kt)("h2",{id:"loading"},"Loading"),(0,r.kt)("p",null,"One strategy to keep things encapsulated is to use a domain-specific Load lifecycle hook to inject all of the Providers that are specific to a particular entity or area of concern - like Users or Profiles or other application-specific focuses."),(0,r.kt)("p",null,"For example, a Load hook for a Users domain might want to provide a Service and a DataLoader along with a Query and a Mutation that will use them, all focused on Users:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use super::{\n    loaders::{self, LOADER},\n    mutation, query,\n    service::{self, SERVICE},\n    MUTATION, QUERY,\n};\n\n#[derive(Default)]\npub struct Load {}\n\n#[async_trait]\nimpl Hook for Load {\n    async fn handle(&self, i: Inject) -> inject::Result<()> {\n        i.provide(&SERVICE, service::Provide::default()).await?;\n        i.provide(&LOADER, loaders::Provide::default()).await?;\n        i.provide(&QUERY, query::Provide::default()).await?;\n        i.provide(&MUTATION, mutation::Provide::default()).await?;\n\n        Ok(())\n    }\n}\n")),(0,r.kt)("p",null,"To collect all of the dependencies needed for a particular application, you might have a top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql.rs")," module that contains an Init hook that simply composes together the smaller individual Init hooks for each domain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use super::{episodes, profiles, role_grants, shows, users};\n\n#[derive(Default)]\npub struct Load {}\n\n#[async_trait]\nimpl Hook for Load {\n    async fn handle(&self, i: Inject) -> inject::Result<()> {\n        i.handle(users::schema::Load::default()).await?;\n        i.handle(profiles::schema::Load::default()).await?;\n        i.handle(role_grants::schema::Load::default()).await?;\n        i.handle(shows::schema::Load::default()).await?;\n        i.handle(episodes::schema::Load::default()).await?;\n\n        Ok(())\n    }\n}\n")),(0,r.kt)("p",null,"In your application's top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"init.rs")," file, you could then simply add this top-level GraphQL Load hook to the list of hooks that are run in response to the Load lifecycle event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub async fn app() -> inject::Result<AxumApplication<Config>> {\n    let mut app = AxumApplication::default().with_config_tag(&CONFIG);\n\n    // ...\n\n    app.on(&EventType::Load, graphql::Load::default());\n\n    // ...\n\n    Ok(app)\n}\n")),(0,r.kt)("h2",{id:"initialization"},"Initialization"),(0,r.kt)("p",null,"In the Init phase, you can provide a top-level SchemaBuilder that other modules can optionally extend, culminating in a fully operation schema ready to execute GraphQL operations."),(0,r.kt)("p",null,"First, build your schema using the standard ",(0,r.kt)("inlineCode",{parentName:"p"},"async_graphql")," approach, building MergedObjects for your top-level Query and Mutation types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"/// The GraphQL top-level Query type\n#[derive(MergedObject)]\npub struct Query(users::Query, profiles::Query);\n\n/// The GraphQL top-level Mutation type\n#[derive(MergedObject)]\npub struct Mutation(\n    users::Mutation,\n    profiles::Mutation,\n);\n\n/// The application's top-level merged GraphQL schema\npub type Schema = async_graphql::Schema<Query, Mutation, EmptySubscription>;\n\n/// The application's top-level GraphQL schema builder\npub type SchemaBuilder = async_graphql::SchemaBuilder<Query, Mutation, EmptySubscription>;\n")),(0,r.kt)("p",null,"Then, provide tags to represent each type in the Inject container:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// Tag(graphql::Schema)\npub const SCHEMA: Tag<Schema> = Tag::new("graphql::Schema");\n\n/// Tag(graphql::SchemaBuilder)\npub const SCHEMA_BUILDER: Tag<SchemaBuilder> = Tag::new("graphql::SchemaBuilder");\n')),(0,r.kt)("p",null,"Finally, define an Init hook that constructs your top-level SchemaBuilder and injects it to the container so that it will be available for any Init hooks that want to add context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Default)]\npub struct Init {}\n\n#[async_trait]\nimpl Hook for Init {\n    async fn handle(&self, i: Inject) -> inject::Result<()> {\n        let users_query = i.consume(&users::QUERY).await?;\n        let profiles_query = i.consume(&profiles::QUERY).await?;\n\n        let users_mutation = i.consume(&users::MUTATION).await?;\n        let profiles_mutation = i.consume(&profiles::MUTATION).await?;\n\n        let builder = Schema::build(\n            Query(users_query, profiles_query),\n            Mutation(users_mutation, profiles_mutation),\n            EmptySubscription,\n        );\n\n        i.inject(&SCHEMA_BUILDER, builder).await?;\n\n        i.handle(users::schema::Init::default()).await?;\n        i.handle(profiles::schema::Init::default()).await?;\n\n        i.handle(\n            schema::Init::default()\n                .with_builder_tag(&SCHEMA_BUILDER)\n                .with_schema_tag(&SCHEMA),\n        )\n        .await?;\n\n        Ok(())\n    }\n}\n")),(0,r.kt)("p",null,"In your application's top-level ",(0,r.kt)("inlineCode",{parentName:"p"},"init.rs")," file, you can then add this top-level GraphQL Init hook to the list of hooks that are run in response to the Init lifecycle event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"pub async fn app() -> inject::Result<AxumApplication<Config>> {\n    let mut app = AxumApplication::default().with_config_tag(&CONFIG);\n\n    // ...\n\n    app.on(&EventType::Init, graphql::Init::default());\n\n    // ...\n\n    Ok(app)\n}\n")))}d.isMDXComponent=!0}}]);