"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[591],{5223:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(5893),a=n(1151);const o={sidebar_position:2},r="Application Lifecycle",s={id:"features/application",title:"Application Lifecycle",description:"To manage the lifecycle of an application, the top-level nakago::Application struct provides a set of lifecycle hooks and an injection container that can be used to initialize and start the application.",source:"@site/docs/features/application.md",sourceDirName:"features",slug:"/features/application",permalink:"/docs/features/application",draft:!1,unlisted:!1,editUrl:"https://github.com/bkonkle/nakago/tree/main/website/docs/features/application.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Dependency Injection",permalink:"/docs/features/dependency-injection"},next:{title:"Axum HTTP Applications",permalink:"/docs/features/axum-http"}},c={},l=[{value:"Lifecycle Hooks",id:"lifecycle-hooks",level:2},{value:"Load",id:"load",level:3},{value:"Init",id:"init",level:3},{value:"Startup",id:"startup",level:3},{value:"Shutdown",id:"shutdown",level:3},{value:"Starting the Application",id:"starting-the-application",level:2}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"application-lifecycle",children:"Application Lifecycle"}),"\n",(0,i.jsxs)(t.p,{children:["To manage the lifecycle of an application, the top-level ",(0,i.jsx)(t.code,{children:"nakago::Application"})," struct provides a set of lifecycle hooks and an injection container that can be used to initialize and start the application."]}),"\n",(0,i.jsxs)(t.p,{children:["Applications carry a reference to the custom ",(0,i.jsx)(t.code,{children:"Config"})," type that your project uses, and an optional Tag to refer to it. This Config borrows ",(0,i.jsx)(t.a,{href:"https://github.com/tokio-rs/axum",children:"Axum"}),"'s ",(0,i.jsx)(t.a,{href:"https://docs.rs/axum/latest/axum/extract/trait.FromRef.html",children:"FromRef"})," strategy to allow the framework to find pieces of the config it needs embedded in the custom structure that works best for your program."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"/// Server Config\n#[derive(Debug, Serialize, Deserialize, Clone, FromRef)]\npub struct Config {\n    /// HTTP config\n    pub http: nakago_axum::Config,\n\n    /// HTTP Auth Config\n    pub auth: auth::Config,\n\n    /// Database config\n    pub database: nakago_sea_orm::Config,\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"lifecycle-hooks",children:"Lifecycle Hooks"}),"\n",(0,i.jsxs)(t.p,{children:["Hooks are invoked when a ",(0,i.jsx)(t.a,{href:"https://github.com/bkonkle/nakago/blob/main/nakago/src/lifecycle.rs",children:"lifecycle event"})," is triggered."]}),"\n",(0,i.jsx)(t.h3,{id:"load",children:"Load"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Load"})," event is triggered before the Application loads dependencies and configuration. During this phase, Hooks should provide any dependencies or config loaders that are necessary to initialize and start the App."]}),"\n",(0,i.jsx)(t.h3,{id:"init",children:"Init"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Init"})," event is triggered before the dependencies and configuration are initialized. During this phase, Hooks should perform any initialization steps and construct anything necessary to start the App."]}),"\n",(0,i.jsx)(t.h3,{id:"startup",children:"Startup"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Startup"})," event is triggered after the Config is loaded, but before the Application is run. During this phase, the Application should start any background tasks or other long-running processes necessary to keep the App running."]}),"\n",(0,i.jsx)(t.h3,{id:"shutdown",children:"Shutdown"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"Shutdown"})," event is triggered before the Application shuts down. During this phase, Hooks should perform any cleanup necessary to cleanly stop the App."]}),"\n",(0,i.jsx)(t.h2,{id:"starting-the-application",children:"Starting the Application"}),"\n",(0,i.jsx)(t.p,{children:"To start your application, pass in your top-level Config type and create an instance. Attach Hooks in the order that they should be executed:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:"let mut app = AxumApplication::<Config>::default();\napp.on(&EventType::Load, users::schema::Load::default());\napp.on(&EventType::Load, authz::Load::default());\napp.on(&EventType::Init, routes::Init::new(new_health_route));\n"})}),"\n",(0,i.jsx)(t.p,{children:"Then, use the underlying server library - Axum in this example - to start listening:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'let (server, addr) = app.run(args.config_path).await?;\n\ninfo!("Started on port: {port}", port = addr.port());\n\nserver.await?;\n'})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var i=n(7294);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);